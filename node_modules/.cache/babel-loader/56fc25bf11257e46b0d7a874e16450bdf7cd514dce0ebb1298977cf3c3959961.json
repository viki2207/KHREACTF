{"ast":null,"code":"// registration\n// login\n// loading current user\nimport axios from \"axios\";\nimport { REGISTER_SUCCESS, USER_LOADED, USER_ERROR, LOGOUT } from \"../types\";\nimport { setAlert } from \"./alertAction\";\nimport api from \"../../utils/api\";\nexport const logout = () => ({\n  type: LOGOUT\n});\nexport const loadUser = () => async dispatch => {\n  try {\n    const res = await api.get(\"/auth\"); // we have to provide the token ?\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: USER_ERROR\n    });\n  }\n};\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    // used to register the user via performing the rest call.\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const data = JSON.stringify({\n      name,\n      email,\n      password\n    });\n    try {\n      console.log(data);\n      const res = await api.post(\"/users\", data, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n      }\n      // lets traverse the errors array\n      // to process the error i.e. display work should be handled by an action .\n      /// let have alertAction.\n    }\n  };\n};\n// export : we can use this function in any file\n// const : keyword\n// register : name of the function\n//({name,email,password}) : json object which is accepted by a function/ method\n// as an arguement caller===> component.\n// async : asynchronous operations\n// dispatch :","map":{"version":3,"names":["axios","REGISTER_SUCCESS","USER_LOADED","USER_ERROR","LOGOUT","setAlert","api","logout","type","loadUser","dispatch","res","get","payload","data","err","console","log","register","name","email","password","config","headers","JSON","stringify","post","errors","response","forEach","error","msg"],"sources":["/Users/vidhi/Desktop/fullstack/KHREACTF/src/redux/actions/authAction.js"],"sourcesContent":["// registration\n// login\n// loading current user\nimport axios from \"axios\";\nimport { REGISTER_SUCCESS, USER_LOADED, USER_ERROR, LOGOUT } from \"../types\";\nimport { setAlert } from \"./alertAction\";\nimport api from \"../../utils/api\";\n\nexport const logout = () => ({ type: LOGOUT });\nexport const loadUser = () => async (dispatch) => {\n  try {\n    const res = await api.get(\"/auth\"); // we have to provide the token ?\n    dispatch({ type: USER_LOADED, payload: res.data });\n  } catch (err) {\n    console.log(err);\n    dispatch({ type: USER_ERROR });\n  }\n};\nexport const register =\n  ({ name, email, password }) =>\n  async (dispatch) => {\n    // used to register the user via performing the rest call.\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    const data = JSON.stringify({ name, email, password });\n    try {\n      console.log(data);\n      const res = await api.post(\"/users\", data, config);\n      dispatch({ type: REGISTER_SUCCESS, payload: res.data });\n      loadUser();\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n      }\n      // lets traverse the errors array\n      // to process the error i.e. display work should be handled by an action .\n      /// let have alertAction.\n    }\n  };\n// export : we can use this function in any file\n// const : keyword\n// register : name of the function\n//({name,email,password}) : json object which is accepted by a function/ method\n// as an arguement caller===> component.\n// async : asynchronous operations\n// dispatch :\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,EAAEC,WAAW,EAAEC,UAAU,EAAEC,MAAM,QAAQ,UAAU;AAC5E,SAASC,QAAQ,QAAQ,eAAe;AACxC,OAAOC,GAAG,MAAM,iBAAiB;AAEjC,OAAO,MAAMC,MAAM,GAAG,OAAO;EAAEC,IAAI,EAAEJ;AAAO,CAAC,CAAC;AAC9C,OAAO,MAAMK,QAAQ,GAAG,MAAM,MAAOC,QAAQ,IAAK;EAChD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IACpCF,QAAQ,CAAC;MAAEF,IAAI,EAAEN,WAAW;MAAEW,OAAO,EAAEF,GAAG,CAACG;IAAK,CAAC,CAAC;EACpD,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChBL,QAAQ,CAAC;MAAEF,IAAI,EAAEL;IAAW,CAAC,CAAC;EAChC;AACF,CAAC;AACD,OAAO,MAAMe,QAAQ,GACnB;EAAA,IAAC;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC;EAAA,OAC1B,MAAOX,QAAQ,IAAK;IAClB;;IAEA,MAAMY,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC;IACD,MAAMT,IAAI,GAAGU,IAAI,CAACC,SAAS,CAAC;MAAEN,IAAI;MAAEC,KAAK;MAAEC;IAAS,CAAC,CAAC;IACtD,IAAI;MACFL,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjB,MAAMH,GAAG,GAAG,MAAML,GAAG,CAACoB,IAAI,CAAC,QAAQ,EAAEZ,IAAI,EAAEQ,MAAM,CAAC;MAClDZ,QAAQ,CAAC;QAAEF,IAAI,EAAEP,gBAAgB;QAAEY,OAAO,EAAEF,GAAG,CAACG;MAAK,CAAC,CAAC;MACvDL,QAAQ,EAAE;IACZ,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZ,MAAMY,MAAM,GAAGZ,GAAG,CAACa,QAAQ,CAACd,IAAI,CAACa,MAAM;MACvC,IAAIA,MAAM,EAAE;QACVA,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAKpB,QAAQ,CAACL,QAAQ,CAACyB,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;MACpE;MACA;MACA;MACA;IACF;EACF,CAAC;AAAA;AACH;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}